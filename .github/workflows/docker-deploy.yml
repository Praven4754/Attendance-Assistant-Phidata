name: Deploy to EC2 with Ngrok

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST 'bash -s' <<'EOF'
          set -eux

          APP_DIR=/home/ubuntu/app
          INTERNAL_PORT=7860
          EXTERNAL_PORT=7860   # keep same as app port to avoid confusion

          # -----------------------------
          # Install Docker + jq if missing
          # -----------------------------
          if ! command -v docker >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y docker.io git curl unzip jq
            sudo systemctl enable docker
            sudo systemctl start docker
          else
            # Ensure jq is installed even if docker exists
            if ! command -v jq >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y jq
            fi
          fi

          # -----------------------------
          # Install Ngrok if not present
          # -----------------------------
          if ! command -v ngrok >/dev/null 2>&1; then
            curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip -o ngrok.zip
            unzip ngrok.zip
            sudo mv ngrok /usr/local/bin/
            rm -f ngrok.zip
            ngrok config add-authtoken ${NGROK_AUTH_TOKEN}
          fi

          # -----------------------------
          # Deploy the App
          # -----------------------------
          # Remove old app directory
          rm -rf "$APP_DIR"

          # Clone latest code
          git clone https://github.com/Praven4754/Attendance-Assistant-Phidata.git "$APP_DIR"
          cd "$APP_DIR"

          # Write .env file
          cat > "$APP_DIR/.env" <<ENV_EOF
          GOOGLE_API_KEY='${GOOGLE_API_KEY:-not_set}'
          ENV_EOF

          # Stop old container if running
          if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^attendance-app$"; then
            sudo docker rm -f attendance-app || true
          fi

          # Build Docker image with timestamp
          IMAGE_TAG="attendance-app-$(date +%Y%m%d%H%M%S)"
          sudo docker build -t attendance-app:$IMAGE_TAG "$APP_DIR"

          # Run new container
          sudo docker run -d --name attendance-app \
            --env-file "$APP_DIR/.env" \
            -p $EXTERNAL_PORT:$INTERNAL_PORT attendance-app:$IMAGE_TAG

          # -----------------------------
          # Start Ngrok Tunnel
          # -----------------------------
          # Kill any existing ngrok
          pkill -f "ngrok tcp" || true
          pkill -f "ngrok http" || true

          # Start ngrok in background
          nohup ngrok http $EXTERNAL_PORT > ngrok.log 2>&1 &

          # Wait for ngrok to initialize
          sleep 5

          # Print public URL to GitHub Actions logs
          curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url'
          EOF
