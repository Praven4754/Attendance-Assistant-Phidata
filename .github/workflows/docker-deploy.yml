name: Deploy to EC2 and get Ngrok URL

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy on EC2 and get Ngrok URL
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "
          export GOOGLE_API_KEY='$GOOGLE_API_KEY'
          export NGROK_AUTH_TOKEN='$NGROK_AUTH_TOKEN'
          
          set -eux
          
          # ----------------------
          # Variables
          # ----------------------
          APP_DIR=\"/home/ubuntu/app\"
          INTERNAL_PORT=7860
          EXTERNAL_PORT=7860
          
          # ----------------------
          # Prepare directories
          # ----------------------
          mkdir -p \"\$APP_DIR\"
          
          # ----------------------
          # Install Docker if missing
          # ----------------------
          if ! command -v docker >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y docker.io git curl jq unzip
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker ubuntu
          fi
          
          # ----------------------
          # Install ngrok if missing
          # ----------------------
          if ! command -v ngrok >/dev/null 2>&1; then
            curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-linux-amd64.zip -o ngrok.zip
            unzip ngrok.zip
            sudo mv ngrok /usr/local/bin/
            rm -f ngrok.zip
          fi
          
          # Configure ngrok with environment variable
          ngrok config add-authtoken \"\$NGROK_AUTH_TOKEN\"
          
          # ----------------------
          # Stop previous container & free port (with proper error handling)
          # ----------------------
          if sudo docker ps -a --format '{{.Names}}' | grep -q '^attendance-app\$'; then
            sudo docker rm -f attendance-app
          fi
          
          # Kill existing ngrok processes (ignore errors if none exist)
          sudo pkill -f 'ngrok http' || true
          
          # Free port (ignore errors if port not in use)
          sudo fuser -k \$EXTERNAL_PORT/tcp || true
          
          # ----------------------
          # Clean app directory
          # ----------------------
          sudo rm -rf \"\$APP_DIR\"
          mkdir -p \"\$APP_DIR\"
          
          # ----------------------
          # Clone project
          # ----------------------
          git clone https://github.com/Praven4754/Attendance-Assistant-Phidata.git \"\$APP_DIR\"
          cd \"\$APP_DIR\"
          
          # ----------------------
          # Create .env file
          # ----------------------
          cat > \"\$APP_DIR/.env\" <<'ENV_EOF'
          GOOGLE_API_KEY=\$GOOGLE_API_KEY
          ENV_EOF
          
          # ----------------------
          # Build and run Docker container
          # ----------------------
          IMAGE_TAG=\"attendance-app-\$(date +%Y%m%d%H%M%S)\"
          sudo docker build -t \"\$IMAGE_TAG\" \"\$APP_DIR\"
          sudo docker run -d --name attendance-app --env-file \"\$APP_DIR/.env\" -p \"\$EXTERNAL_PORT:\$INTERNAL_PORT\" \"\$IMAGE_TAG\"
          
          # Wait for container to start
          sleep 5
          
          # Verify container is running
          if ! sudo docker ps | grep -q 'attendance-app'; then
            echo 'Container failed to start. Checking logs:'
            sudo docker logs attendance-app || true
            exit 1
          fi
          
          # ----------------------
          # Start ngrok
          # ----------------------
          nohup ngrok http \$EXTERNAL_PORT --log=stdout > /home/ubuntu/ngrok.log 2>&1 &
          
          # Wait for ngrok to start
          echo 'Waiting for ngrok to start...'
          sleep 10
          
          # ----------------------
          # Fetch Ngrok URL
          # ----------------------
          NGROK_URL=\"\"
          for i in {1..15}; do
            echo \"Attempt \$i: Checking ngrok status...\"
            
            # Check if ngrok API is responding
            if curl -s http://127.0.0.1:4040/api/tunnels >/dev/null 2>&1; then
              NGROK_URL=\$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' 2>/dev/null || echo '')
              
              if [ -n \"\$NGROK_URL\" ] && [ \"\$NGROK_URL\" != \"null\" ] && [ \"\$NGROK_URL\" != \"\" ]; then
                echo \"\$NGROK_URL\" > /home/ubuntu/ngrok_url.txt
                echo \"Success! Ngrok URL: \$NGROK_URL\"
                break
              fi
            fi
            
            if [ \$i -eq 15 ]; then
              echo 'Failed to get ngrok URL after 15 attempts'
              echo 'Ngrok log contents:'
              cat /home/ubuntu/ngrok.log 2>/dev/null || echo 'No ngrok log found'
              echo 'Ngrok processes:'
              ps aux | grep ngrok || echo 'No ngrok processes found'
              exit 1
            fi
            
            sleep 5
          done
          "

      - name: Show Ngrok URL
        run: |
          NGROK_URL=$(ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "cat /home/ubuntu/ngrok_url.txt 2>/dev/null || echo 'URL not found'")
          echo "ðŸš€ Deployment Complete!"
          echo "ðŸ“± Access your app at: $NGROK_URL"
